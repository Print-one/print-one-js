import {
  CsvOrder,
  CsvStatus,
  Finish,
  Format,
  PaginatedResponse,
  Status,
  Template,
} from "../src";
import { client } from "./client";
import { sleep } from "../src/utils";
import * as fs from "fs";
import * as path from "path";

let file: ArrayBuffer = null as unknown as ArrayBuffer;
let order: CsvOrder = null as unknown as CsvOrder;
let template: Template = null as unknown as Template;

beforeAll(async function () {
  file = fs.readFileSync(path.join(__dirname, "assets/test.csv"));

  template = await client.createTemplate({
    name: `Test Order ${new Date().toISOString().replaceAll(":", "-")}`,
    format: Format.POSTCARD_SQ15,
    labels: ["library-unit-test"],
    pages: ["{{name}}, your free coupon: {{coupon}}", "page2"],
  });
});

beforeEach(async function () {
  order = await client.createCsvOrder({
    mapping: {
      recipient: {
        city: "{{City}}",
        name: "{{FirstName}} {{LastName}}",
        address: "{{Street}} {{HouseNr}}",
        country: "{{Country}}",
        postalCode: "{{ZIP}}",
      },
      mergeVariables: {
        name: "{{FirstName}}",
        coupon: "{{Coupon}}",
      },
    },
    template: template,
    file: file,
    finish: Finish.GLOSSY,
  });
});

afterAll(async function () {
  await template.delete();
});

describe("getTemplate", function () {
  it("should get the template", async function () {
    // arrange

    // act
    const temp = await order.getTemplate();

    // assert
    expect(temp).toBeInstanceOf(Template);
    expect(temp.id).toEqual(template.id);
  });
});

describe("refresh", function () {
  it("should refresh the csv order", async function () {
    // precondition
    if (order.status !== CsvStatus.order_created) {
      return;
    }

    // arrange

    // act
    while (order.status === CsvStatus.order_created) {
      await order.refresh();
      await sleep(1000);
    }

    // assert
    expect(order.status).not.toEqual(CsvStatus.order_created);
  }, 30000);
});

describe("getOrders", function () {
  it("should get orders generated by the csv", async function () {
    // arrange

    // act
    while (await order.getOrders({}).then((x) => x.data.length < 1)) {
      await order.refresh();
      await sleep(1000);
    }

    await order.refresh();

    const totalOrders = order.totalOrderCount;
    const failedOrderCount = order.failedOrderCount;
    const processedOrderCount = order.processedOrderCount;

    const orders = await order.getOrders({ page: 1, limit: 200 });

    // assert
    expect(orders).toBeInstanceOf(PaginatedResponse);
    expect(orders.data.length).toBe(totalOrders);
    expect(
      orders.data.filter((x) => x.status === Status.order_failed).length,
    ).toBe(failedOrderCount);
    expect(
      orders.data.filter((x) => x.status !== Status.order_failed).length,
    ).toBe(processedOrderCount);
  }, 30_000);
});
